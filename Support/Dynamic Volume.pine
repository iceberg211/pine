// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// Â© Zeiierman {
//@version=6
indicator('Dynamic Volume Clusters with Retest Signals (Zeiierman)', overlay = true)
//~~~~}

//~~ Tooltips {
var string t1 = "Defines the number of bars used to calculate the range. Longer periods capture broader market structures, while shorter periods react more quickly to recent price movements."
var string t2 = "Sets the width of the upper and lower zones as a percentage of the calculated range. Larger values create wider zones, potentially capturing more price action."
var string t3 = "Sets the color for the first level of bearish volume indication. Use a strong color for clear visual distinction."
var string t4 = "Sets the color for the second, more intense level of bearish volume. Typically a brighter or deeper shade for stronger signals."
var string t5 = "Sets the color for the first level of bullish volume indication. Use a clear green for easy identification of bullish momentum."
var string t6 = "Sets the color for the second, more intense level of bullish volume. Use a contrasting shade for strong bullish signals."
var string t7 = "Controls the thickness of the volume lines, affecting visual prominence. Thicker lines emphasize volume extremes."
var string t8 = "Toggle to enable or disable retest signals. When enabled, the script will print Triangle Up/Down signals based on retest logic."
var string t9 = "Sets the minimum number of bars that must pass after a reset before a retest signal is considered valid. Lower values allow more frequent signals."
var string t10 = "Defines the maximum number of bars within which a retest must occur to be considered valid. Higher values allow broader retest windows."
var string t11 = "Sets the color for the first retest signal level. Use a bright color for immediate visibility of these critical events."
var string t12 = "Sets the color for the second retest signal level. Typically a contrasting or complementary color for clear differentiation."
var string t13 = "Sets the maximum lookback period for calculating the dynamic price cluster. Longer periods create smoother, more stable clusters."
var string t14 = "Adjusts the sensitivity of the cluster calculation. Higher values require stronger, more consistent price action to form clusters."
var string t15 = "Sets the minimum number of price touches required to start forming a cluster. Lower values capture early trends, higher values confirm more established zones."
var string t16 = "Defines the maximum number of price touches required to fully develop a price cluster. Larger values capture mature trends."
var string t17 = "Sets the primary color for bullish clusters. Choose a bright, optimistic tone to emphasize strength."
var string t18 = "Sets the secondary color for bullish clusters, typically a slightly lighter or complementary shade for visual layering."
var string t19 = "Sets the primary color for bearish clusters. Use a strong, assertive tone to signal selling pressure."
var string t20 = "Sets the secondary color for bearish clusters, usually a deeper or more intense shade for strong downward signals."
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ Inputs {
len   = input.int(500, title='Range Lookback Period', minval=2, group="Range Settings", inline="", tooltip=t1)
zoneP = input.float(1.5, title='Zone Width (% of Range)', minval=1, maxval=50, step=0.5, group="Range Settings", inline="", tooltip=t2)

red_1   = input.color(color.maroon,title="", group="Volume Lines", inline="red", tooltip=t3)
red_2   = input.color(#FF0000, title="",group="Volume Lines", inline="red", tooltip=t4)
green_1 = input.color(color.green, title="",group="Volume Lines", inline="green", tooltip=t5)
green_2 = input.color(#09ff00, title="",group="Volume Lines", inline="green", tooltip=t6)
width   = input.int(2, minval=1 , maxval=10, title='Width', group="Volume Lines", inline="line", tooltip=t7)

retest_signals           = input.bool(true,title="Retest Signals",group="Retest Signals", inline="", tooltip=t8)
min_bars_between_signals = input.int(10, minval=1,  title='Minimum Bars to initite a Retest', group="Retest Signals", inline="", tooltip=t9)
max_bars_between_signals = input.int(200, minval=1, title='Maximum Bars Between Retests', group="Retest Signals", inline="", tooltip=t10)
retest_col_1 = input.color(color.lime,title="", group="Retest Signals", inline="1", tooltip=t11)
retest_col_2 = input.color(color.red,title="", group="Retest Signals", inline="1", tooltip=t12)

max_length          = input.int(500, minval=1, title="Price Cluster Period", group="Price Cluster", tooltip=t13)
filterStrength      = input.float(0.01, title="Cluster Confirmation", minval=0.005, maxval=1, step=0.005, group="Price Cluster", tooltip=t14)
price_cluster_start = input.int(2, title="Price Cluster Start", minval=1, group="Price Cluster", tooltip=t15) //Minimum number of price touches required to start building a price cluster (accumulation zone).
price_cluster_peak  = input.int(100, title="Price Cluster Peak", minval=1, group="Price Cluster", tooltip=t16) // Maximum number of price touches required to fully develop a price cluster (accumulation zone).
bullish_cluster_1   = input.color(color.lime, title="", group="Price Cluster", inline="bu",tooltip=t17)
bullish_cluster_2   = input.color(#14e4ff, title="", group="Price Cluster", inline="bu",tooltip=t18)
bearish_cluster_1   = input.color(color.red, title="", group="Price Cluster", inline="be",tooltip=t19)
bearish_cluster_2   = input.color(#14e4ff, title="", group="Price Cluster", inline="be",tooltip=t20)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ Volume Handling {
vol = volume > 0 ? volume : 1
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ Range Boundaries {
hh = ta.highest(high, len)
ll = ta.lowest(low, len)
rangee         = hh - ll
upper_zone_top = hh
upper_zone_bottom = hh - (rangee * zoneP / 100)
lower_zone_top    = ll + (rangee * zoneP / 100)
lower_zone_bottom = ll
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ Var {
var float[] ma_U  = array.new_float(1, na)
var int[] len_U   = array.new_int(1, 0)
var int[] count_U = array.new_int(1, 0)

var float[] ma_L  = array.new_float(1, na)
var int[] len_L   = array.new_int(1, 0)
var int[] count_L = array.new_int(1, 0)

var int last_retest_U = 0
var int last_retest_L = 0
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ Volume Power Logic {
VolumePower(v, c, l, h, ca) =>
    ca ? math.round(math.round(v * (c - l) / (h - l)) / v * 100) :
         math.round(math.round(v * (h - c) / (h - l)) / v * 100)

buyVol  = VolumePower(vol, close, low, high, true)
sellVol = VolumePower(vol, close, low, high, false)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ Restart Logic for Upper Zone {
if close > upper_zone_bottom and close <= upper_zone_top
    ma_U.set(0, close)
    len_U.set(0, 1)
    count_U.set(0, 0)
    last_retest_U := bar_index
else if len_U.get(0) > 0
    current_avg_U = ma_U.get(0)
    current_len_U = len_U.get(0)
    current_count_U = count_U.get(0)
    if current_count_U >= 2
        new_avg_U = (current_avg_U * current_len_U + close) / (current_len_U + 1)
        ma_U.set(0, new_avg_U)
        len_U.set(0, current_len_U + 1)
    count_U.set(0, current_count_U + 1)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
// ~~ Restart Logic for Lower Zone {
if close >= lower_zone_bottom and close < lower_zone_top
    ma_L.set(0, close)
    len_L.set(0, 1)
    count_L.set(0, 0)
    last_retest_L := bar_index
else if len_L.get(0) > 0
    current_avg_L = ma_L.get(0)
    current_len_L = len_L.get(0)
    current_count_L = count_L.get(0)
    if current_count_L >= 2
        new_avg_L = (current_avg_L * current_len_L + close) / (current_len_L + 1)
        ma_L.set(0, new_avg_L)
        len_L.set(0, current_len_L + 1)
    count_L.set(0, current_count_L + 1)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ Get Values {
VPMavg_U = ma_U.get(0)
VPMavg_L = ma_L.get(0)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ Retest Signal Logic {
sma        = ta.sma(close,5)
up         = ta.rising(sma,5) 
dn         = ta.falling(sma,5) 
crossover  = ta.crossover(close, VPMavg_U)
crossunder = ta.crossunder(close, VPMavg_L)
upper_retest = retest_signals and crossover and up and bar_index - last_retest_U >= min_bars_between_signals 
 and bar_index - last_retest_U <= max_bars_between_signals and VPMavg_U[1]<=VPMavg_U
lower_retest = retest_signals and crossunder and dn and bar_index - last_retest_L >= min_bars_between_signals 
 and bar_index - last_retest_L <= max_bars_between_signals and VPMavg_L <= VPMavg_L[1]
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~  Dynamic Price Cluster {
counts_diff         = VPMavg_U - VPMavg_L
max_abs_counts_diff = ta.highest(math.abs(counts_diff), 200)
counts_diff_norm    = (counts_diff + max_abs_counts_diff) / (2 * max_abs_counts_diff)
dyn_length          = 5 + counts_diff_norm * (max_length - 5)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ Accelerator factor {
calc_accel_factor(float counts_diff, float prev_counts_diff) =>
    delta_counts_diff = math.abs(counts_diff - prev_counts_diff)
    float max_delta_counts_diff = ta.highest(delta_counts_diff, 20)
    max_delta_counts_diff := max_delta_counts_diff == 0 ? 1 : max_delta_counts_diff
    float accel_factor = delta_counts_diff / max_delta_counts_diff
    accel_factor
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ Adjust alpha {
adjust_alpha(float dyn_length, float accel_factor, float accel_multiplier) =>
    alpha_base = 2 / (dyn_length + 1)
    alpha = alpha_base * (1 + accel_factor * accel_multiplier)
    alpha := math.min(1, alpha) 
    alpha
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ Accelerator Factor {
accel_factor = calc_accel_factor(counts_diff, nz(counts_diff[1]))
alpha        = adjust_alpha(dyn_length, accel_factor, 5.0)

// ~~ Compute dynamic price cluster {
var float dyn_cluster = na
dyn_cluster := na(dyn_cluster[1]) ? close : alpha * close + (1 - alpha) * dyn_cluster[1]
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ {
cluster_color(avg_val, is_upper, is_lower, is_trend) =>
    count = 0
    for i = 0 to len - 1
        if high[i] >= avg_val and low[i] <= avg_val
            count += 1
    if is_upper
        color.from_gradient(count, 5, 15, color.new(red_1, 20 - count),red_2)
    else if is_lower
        color.from_gradient(count, 5, 15, color.new(green_1, 20 - count), green_2)
    else if is_trend
        if close > avg_val
            color.from_gradient(count, price_cluster_start, price_cluster_peak, color.new(bullish_cluster_1, 20 - count), bullish_cluster_2)
        else
            color.from_gradient(count, price_cluster_start, price_cluster_peak, color.new(bearish_cluster_1, 20 - count), bearish_cluster_2)
    else
        color.new(color.gray, 20)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ Kalman Filter {
kf(src)=>
    var float kfRSI = na
    kfRSI    := na(kfRSI) ? src : kfRSI + filterStrength * (src - kfRSI)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ {
dynamic_price_cluster = kf(dyn_cluster)
U_col        = VPMavg_U == close ? na : cluster_color(VPMavg_U, true, false, false)
L_col        = VPMavg_L == close ? na : cluster_color(VPMavg_L, false, true, false)
trend_col    = dynamic_price_cluster == close ? na : cluster_color(dynamic_price_cluster , false, false, true)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ Plots {
placesell = ta.highest(high,5) + ta.ema(ta.tr,20)
placebuy  = ta.lowest(low,5) +-ta.ema(ta.tr,20)
plotshape(upper_retest?placesell:na, title='Triangle Dn', style=shape.triangledown, location=location.absolute, color=retest_col_2, size=size.tiny)
plotshape(lower_retest?placebuy:na, title='Triangle Up', style=shape.triangleup, location=location.absolute, color=retest_col_1, size=size.tiny)

plot(VPMavg_U, color=U_col, linewidth=width, title='VPMA Upper')
plot(VPMavg_L, color=L_col, linewidth=width, title='VPMA Lower')

plotcandle(open,high,low,close, color=trend_col, wickcolor =trend_col , bordercolor = trend_col, title="Cluster Candlesticks")

// UI Only
plotshape(upper_retest?placesell:na, title='Dn - UI Only', style=shape.triangledown, location=location.absolute, color=color.new(retest_col_2,50), size=size.normal)
plotshape(lower_retest?placebuy:na, title='Up - UI Only', style=shape.triangleup, location=location.absolute, color=color.new(retest_col_1,50), size=size.normal)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}